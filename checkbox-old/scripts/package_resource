#!/usr/bin/python3
#
# This file is part of Checkbox.
#
# Copyright 2013 Canonical Ltd.
# Written by:
#   Sylvain Pineau <sylvain.pineau@canonical.com>
#
# Checkbox is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Checkbox is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Checkbox.  If not, see <http://www.gnu.org/licenses/>.

import platform
from subprocess import check_output

# Command to retrieve packages.
COMMAND = [
    'dpkg-query', '-W',
    '-f=${db:Status-Abbrev}\t${Package}\t${Version}\t${binary:Summary}\n']

# Package selection states
desired_to_value = {
    'u': 'Unknown',
    'i': 'Install',
    'r': 'Remove',
    'p': 'Purge',
    'h': 'Hold'}

# Package states
status_to_value = {
    'n': 'Not Installed',
    'i': 'Installed',
    'c': 'Config-files',
    'u': 'Unpacked',
    'f': 'Half-configured',
    'h': 'Half-inst',
    'w': 'Triggers-awaited',
    't': 'Triggers-pending'}

# Package flags
error_to_value = {
    'r': 'Reinst-required'}

# Only dpkg >= 1.16.2 supports virtual output binary:Summary
# and db:Status-Abbrev fields.
COMPATIBILITY_MODE = False
if float(platform.dist()[1]) < 12.10:
    COMMAND = "COLUMNS=400 dpkg -l"
    COMPATIBILITY_MODE = True

query_results = check_output(
    COMMAND, shell=COMPATIBILITY_MODE).decode('UTF-8').splitlines()

if COMPATIBILITY_MODE:
    line = query_results[4]
    # Get length from separator
    lengths = [len(i) + 1 for i in line.split("-")]
    for i in range(1, len(lengths)):
        lengths[i] += lengths[i - 1]
    query_results = query_results[5:]

for line in query_results:
    if COMPATIBILITY_MODE:
        name, version, description = [
            line[lengths[i]:lengths[i + 1]].strip() for i in range(3)]
        info = line[:3]
    else:
        info, name, version, description = line.split('\t')

    # Skip records not containing all mandatory columns
    if not (info and name and version and description):
        continue
    desired, status, error = list(info)

    print('name:', name)
    print('version:', version)
    print('description:', description)
    print('desired:', desired_to_value.get(desired))
    print('status:', status_to_value.get(status))
    if error != ' ':
        print('error:', error_to_value.get(error))
    print()
