#!/usr/bin/env python3

import os
import sys

from checkbox.parsers.dmidecode import DmidecodeParser
from checkbox.parsers.meminfo import MeminfoParser

THRESHOLD = 10

class DmiResult:

    total_size = 0

    def addDmiDevice(self, device):
        form = getattr(device, "form", None)

        if form and "IMM" in form:
            try:
                self.total_size += int(getattr(device, "size", 0))
            except ValueError:
                pass

def get_installed_memory_size():
    dmi = DmidecodeParser(os.popen('dmidecode'))
    result = DmiResult()

    dmi.run(result)

    return result.total_size

class MeminfoResult:

    memtotal = 0

    def setMemory(self, memory):
        self.memtotal = memory['total']

def get_visible_memory_size():
    parser = MeminfoParser(open('/proc/meminfo'))
    result = MeminfoResult()
    parser.run(result)

    return result.memtotal

def main():
    if os.geteuid() != 0:
        print("This script must be run as root.", file=sys.stderr)
        return 1

    installed_memory = get_installed_memory_size()
    visible_memory = get_visible_memory_size()

    difference = installed_memory - visible_memory
    try:
        percentage = difference / installed_memory * 100
    except ZeroDivisionError:
        print("Results:")
        print("\t/proc/meminfo reports:\t%s kB" % visible_memory, file=sys.stderr)
        print("\tdmi reports:\t%s kB" % installed_memory, file=sys.stderr)
        print("\nFAIL: Either dmi or /proc/meminfo returned a memory size of 0 kB", file=sys.stderr)
        return 1
    
    if percentage <= THRESHOLD:
        print("Results:")
        print("\t/proc/meminfo reports:\t%s kB" % visible_memory)
        print("\tdmi reports:\t%s kB" % installed_memory)
        print("\nPASS: Meminfo reports %d bytes less than DMI, a difference of %.2f%%. This is less than the %d%% variance allowed." % (difference, percentage, THRESHOLD))
        return 0
    else:
        print("Results")
        print("\t/proc/meminfo reports:\t%s kB" % visible_memory, file=sys.stderr)
        print("\tdmi reports:\t%s kB" % installed_memory, file=sys.stderr)
        print("\nFAIL: Meminfo reports %d bytes less than DMI, a difference of %.2f%%. Only a variance of %d%% in reported memory is allowed." % (difference, percentage, THRESHOLD), file=sys.stderr)
        return 1

if __name__ == "__main__":
    sys.exit(main())
