plugin: shell
name: suspend/network_before_suspend
depends: networking/detect
_description: Record the current network before suspending.
command: internet_test | tee $CHECKBOX_DATA/network_before_suspend.txt

plugin: shell
name: suspend/resolution_before_suspend
_description: Record the current resolution before suspending.
command: xrandr -q |grep '*'| awk '{print $1}' > $CHECKBOX_DATA/resolution_before_suspend.txt

plugin: shell
name: suspend/audio_before_suspend
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
_description: Record mixer settings before suspending.
command: amixer > $CHECKBOX_DATA/audio_before_suspend.txt

plugin: shell
name: suspend/cpu_before_suspend
requires:
 package.name == 'linux'
_description: Verify that all the CPUs are online before suspending
command: cpuinfo_resource > $CHECKBOX_DATA/cpuinfo_before_suspend

plugin: shell
name: suspend/memory_before_suspend
requires:
 package.name == 'linux'
_description:
 Dumps memory info to a file for comparison after suspend test has been run
command: meminfo_resource > $CHECKBOX_DATA/meminfo_before_suspend

plugin: shell
name: suspend/wireless_before_suspend
depends: wireless/wireless_connection
requires: device.category == 'WIRELESS'
command: nmcli -t -f UUID con status > $CHECKBOX_DATA/connections && connect_wireless && internet_test --interface=`nmcli dev list | grep -B 1 wireless | grep GENERAL.DEVICE | awk '{print $2}'` && for con in `cat $CHECKBOX_DATA/connections`; do nmcli con up uuid "$con"; done
_description:
 This test disconnects all connections and then connects to the wireless
 interface. It then checks the connection to confirm it's working as expected.

plugin: shell
name: suspend/bluetooth_obex_before_suspend
requires:
 package.name == 'bluez' and package.name == 'obexd-client'
 device.category == 'BLUETOOTH'
command: obex_send $BTDEVADDR $CHECKBOX_SHARE/data/images/JPEG_Color_Image_Ubuntu.jpg
_description:
 This is an automated Bluetooth file transfer test. It sends an image to the device specified by the BTDEVADDR environment variable.

plugin: shell
name: suspend/bluetooth_obex_send_before_suspend
requires:
 package.name == 'bluez' and package.name == 'obexftp'
 device.category == 'BLUETOOTH'
command: bluetooth_test $CHECKBOX_SHARE/data/images/JPEG_Color_Image_Ubuntu.jpg $BTDEVADDR send
_description:
 This is an automated Bluetooth file transfer test. It sends an image to the device specified by the BTDEVADDR environment variable.

plugin: shell
name: suspend/bluetooth_obex_browse_before_suspend
depends: suspend/bluetooth_obex_send_before_suspend
requires:
 package.name == 'bluez' and package.name == 'obexftp'
 device.category == 'BLUETOOTH'
command: bluetooth_test $CHECKBOX_SHARE/data/images/JPEG_Color_Image_Ubuntu.jpg $BTDEVADDR browse
_description:
 This is an automated Bluetooth test. It emulates browsing on a remote device specified by the BTDEVADDR environment variable.

plugin: shell
name: suspend/bluetooth_obex_get_before_suspend
depends: suspend/bluetooth_obex_browse_before_suspend
requires:
 package.name == 'bluez' and package.name == 'obexftp'
 device.category == 'BLUETOOTH'
command: bluetooth_test $CHECKBOX_SHARE/data/images/JPEG_Color_Image_Ubuntu.jpg $BTDEVADDR get; sleep 3; bluetooth_test $CHECKBOX_SHARE/data/images/JPEG_Color_Image_Ubuntu.jpg $BTDEVADDR remove
_description:
 This is an automated Bluetooth test. It receives the given file from a remote host specified by the BTDEVADDR environment variable

plugin: manual
name: suspend/bluetooth_obex_before_suspend_manual
requires:
 package.name == 'bluez' and package.name == 'obexd-client'
 device.category == 'BLUETOOTH'
command: obex_send `bluetooth_scan` $CHECKBOX_SHARE/data/images/JPEG_Color_Image_Ubuntu.jpg
_description:
 PURPOSE:
     This test will send the image 'JPEG_Color_Image_Ubuntu.jpg' to a specified device
 STEPS:
     1. Click "Test" and you will be prompted to enter the Bluetooth device name of a device that can accept file transfers (It may take a few moments after entering the name for the file to begin sending)
     2. Accept any prompts that appear on both devices
 VERIFICATION:
     Was the data correctly transferred?

plugin: manual
name: suspend/suspend_advanced
depends: power-management/rtc suspend/network_before_suspend suspend/resolution_before_suspend suspend/wireless_before_suspend suspend/cpu_before_suspend suspend/memory_before_suspend
requires:
 package.name == 'fwts' or package.name == 'pm-utils'
 sleep.mem == 'supported'
user: root
environ: CHECKBOX_DATA
command:
 if type -P fwts >/dev/null; then
  echo "Calling fwts"
  fwts s3 --s3-sleep-delay=30 -r $CHECKBOX_DATA/suspend_single_log
  grep 'Critical failures: NONE' $CHECKBOX_DATA/suspend_single_log
 else
  echo "Calling sleep_test"
  sleep_test -d
 fi
_description:
 PURPOSE:
     This test will check suspend and resume
 STEPS:
     1. Click "Test" and your system will suspend for about 30 - 60 seconds
     2. If your system does not wake itself up after 60 seconds, please press the power button momentarily to wake the system manually
     3. If your system fails to wake at all and must be rebooted, restart System Testing after reboot and mark this test as Failed
 VERIFICATION:
     Did your system suspend and resume correctly?

plugin: shell
name: suspend/suspend_advanced_auto
depends: power-management/rtc
requires:
    package.name == 'fwts'
    sleep.mem == 'supported'
_description:
 This is the automated version of suspend/suspend_advanced.
user: root
environ: CHECKBOX_DATA
command: fwts s3 --s3-sleep-delay=30 -r $CHECKBOX_DATA/suspend_single_log || true; grep 'Critical failures: NONE' $CHECKBOX_DATA/suspend_single_log

plugin: attachment
name: suspend/suspend-single-log-attach
command: [ -e $CHECKBOX_DATA/suspend_single_log ] && cat $CHECKBOX_DATA/suspend_single_log
_description:
 Attaches the log from the single suspend/resume test to the results

plugin: shell
name: suspend/network_after_suspend
depends: suspend/suspend_advanced suspend/network_before_suspend
_description: Test the network after resuming.
command: network_wait; internet_test | diff $CHECKBOX_DATA/network_before_suspend.txt -

plugin: shell
name: suspend/resolution_after_suspend
depends: suspend/suspend_advanced suspend/resolution_before_suspend
_description: Test to see that we have the same resolution after resuming as before.
command: xrandr -q |grep '*'| awk '{print $1}' | diff $CHECKBOX_DATA/resolution_before_suspend.txt -

plugin: shell
name: suspend/audio_after_suspend
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
depends: suspend/suspend_advanced suspend/audio_before_suspend
_description: Verify that mixer settings after suspend are the same as before suspend.
command: amixer | diff $CHECKBOX_DATA/audio_before_suspend.txt -

plugin: shell
name: suspend/cpu_after_suspend
requires:
 package.name == 'linux'
depends: suspend/suspend_advanced suspend/cpu_before_suspend
_description: Verify that all CPUs are online after resuming.
command: cpuinfo_resource | diff $CHECKBOX_DATA/cpuinfo_before_suspend -

plugin: shell
name: suspend/cpu_after_suspend_auto
requires:
 package.name == 'linux'
depends: suspend/suspend_advanced_auto suspend/cpu_before_suspend
_description: Verify that all CPUs are online after resuming.
command: cpuinfo_resource | diff $CHECKBOX_DATA/cpuinfo_before_suspend -

plugin: shell
name: suspend/memory_after_suspend
requires:
 package.name == 'linux'
depends: suspend/suspend_advanced suspend/memory_before_suspend
_description:
 Verify that all memory is available after resuming from suspend.
command: meminfo_resource | diff $CHECKBOX_DATA/meminfo_before_suspend -

plugin: shell
name: suspend/memory_after_suspend_auto
requires:
 package.name == 'linux'
depends: suspend/suspend_advanced_auto suspend/memory_before_suspend
_description:
 Verify that all memory is available after resuming from suspend.
command: meminfo_resource | diff $CHECKBOX_DATA/meminfo_before_suspend -

plugin: manual
name: suspend/display_after_suspend
requires:
 package.name == 'linux'
depends: suspend/suspend_advanced
_description:
 PURPOSE:
     This test will check that the display is correct after suspend and resume
 STEPS:
     1. Check that your display does not show up visual artifacts after resuming.
 VERIFICATION:
     Does the display work normally after resuming from suspend?

plugin: shell
name: suspend/wireless_after_suspend
depends: suspend/suspend_advanced suspend/wireless_before_suspend
requires:
 device.category == 'WIRELESS'
 environment.routers == 'multiple'
command: connect_wireless && internet_test --interface=`nmcli dev list | grep -B 1 wireless | grep GENERAL.DEVICE | awk '{print $2}'` && for con in `cat $CHECKBOX_DATA/connections`; do nmcli con up uuid "$con"; done
_description:
 This test checks that the wireless interface is working after suspending the system. It
 disconnects all interfaces and then connects to the wireless interface and checks that the
 connection is working as expected.

plugin: shell
name: suspend/wireless_connection_after_suspend_wpa_bg
depends: suspend/suspend_advanced_auto
requires:
 device.category == 'WIRELESS'
 environment.routers == 'multiple'
user: root
environ: WPA_BG_SSID WPA_BG_PSK
command: trap "rm -f /etc/NetworkManager/system-connections/$WPA_BG_SSID" EXIT; create_connection $WPA_BG_SSID --security=wpa --key=$WPA_BG_PSK; internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
 Tests that the systems wireless hardware can connect to a router using WPA
 security and the 802.11b/g protocols after the system has been suspended.

plugin: shell
name: suspend/wireless_connection_after_suspend_open_bg
depends: suspend/suspend_advanced_auto
requires:
 device.category == 'WIRELESS'
 environment.routers == 'multiple'
user: root
environ: OPEN_BG_SSID
command: trap "rm -f /etc/NetworkManager/system-connections/$OPEN_BG_SSID" EXIT; create_connection $OPEN_BG_SSID; internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
 Tests that the systems wireless hardware can connect to a router using no
 security and the 802.11b/g protocols after the system has been suspended.

plugin: shell
name: suspend/wireless_connection_after_suspend_wpa_n
depends: suspend/suspend_advanced_auto
requires:
 device.category == 'WIRELESS'
 environment.routers == 'multiple'
user: root
environ: WPA_N_SSID WPA_N_PSK
command: trap "rm -f /etc/NetworkManager/system-connections/$WPA_N_SSID" EXIT; create_connection $WPA_N_SSID --security=wpa --key=$WPA_N_PSK; internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
 Tests that the systems wireless hardware can connect to a router using WPA
 security and the 802.11n protocol after the system has been suspended.

plugin: shell
name: suspend/wireless_connection_after_suspend_open_n
depends: suspend/suspend_advanced_auto
requires:
 device.category == 'WIRELESS'
 environment.routers == 'multiple'
user: root
environ: OPEN_N_SSID
command: trap "rm -f /etc/NetworkManager/system-connections/$OPEN_N_SSID" EXIT; create_connection $OPEN_N_SSID; internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
 Tests that the systems wireless hardware can connect to a router using no
 security and the 802.11n protocol after the system has been suspended.

plugin: manual
name: suspend/wireless_connection_after_suspend_wpa_bg_manual
depends: suspend/suspend_advanced
requires:
 device.category == 'WIRELESS'
 environment.routers == 'single'
user: root
environ: ROUTER_SSID ROUTER_PSK
command: trap "nmcli con delete id $ROUTER_SSID" EXIT; create_connection $ROUTER_SSID --security=wpa --key=$ROUTER_PSK && internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
 PURPOSE:
     Tests that the systems wireless hardware can connect to a router using WPA
     security and the 802.11b/g protocols.
 STEPS:
     1. Open your routers configuration tool
     2. Change the settings to only accept connections on the B and G wireless bands
     3. Make sure the SSID is set to ROUTER_SSID
     4. Change the security settings to use WPA2 and ensure the PSK matches that set in ROUTER_PSK
     5. Click the 'Test' button to create a connection to the router and test the connection
 VERIFICATION:
     Verification is automated, do not change the automatically selected result.

plugin: manual
name: suspend/wireless_connection_after_suspend_open_bg_manual
depends: suspend/suspend_advanced
requires:
 device.category == 'WIRELESS'
 environment.routers == 'single'
user: root
environ: ROUTER_SSID
command: trap "nmcli con delete id $ROUTER_SSID" EXIT; create_connection $ROUTER_SSID && internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
 PURPOSE:
     Tests that the systems wireless hardware can connect to a router using
     no security and the 802.11b/g protocols.
 STEPS:
     1. Open your routers configuration tool
     2. Change the settings to only accept connections on the B and G wireless bands
     3. Make sure the SSID is set to ROUTER_SSID
     4. Change the security settings to use no security
     5. Click the 'Test' button to create a connection to the router and test the connection
 VERIFICATION:
     Verification is automated, do not change the automatically selected result.

plugin: manual
name: suspend/wireless_connection_after_suspend_wpa_n_manual
depends: suspend/suspend_advanced
requires:
 device.category == 'WIRELESS'
 environment.routers == 'single'
user: root
environ: ROUTER_SSID ROUTER_PSK
command: trap "nmcli con delete id $ROUTER_SSID" EXIT; create_connection $ROUTER_SSID --security=wpa --key=$ROUTER_PSK && internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
 PURPOSE:
     Tests that the systems wireless hardware can connect to a router using WPA
     security and the 802.11n protocols.
 STEPS:
     1. Open your routers configuration tool
     2. Change the settings to only accept connections on the N wireless band
     3. Make sure the SSID is set to ROUTER_SSID
     4. Change the security settings to use WPA2 and ensure the PSK matches that set in ROUTER_PSK
     5. Click the 'Test' button to create a connection to the router and test the connection
 VERIFICATION:
     Verification is automated, do not change the automatically selected result.

plugin: manual
name: suspend/wireless_connection_after_suspend_open_n_manual
depends: suspend/suspend_advanced
requires:
 device.category == 'WIRELESS'
 environment.routers == 'single'
user: root
environ: ROUTER_SSID
command: trap "nmcli con delete id $ROUTER_SSID" EXIT; create_connection $ROUTER_SSID && internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
 PURPOSE:
     Tests that the systems wireless hardware can connect to a router using
     no security and the 802.11n protocol.
 STEPS:
     1. Open your routers configuration tool
     2. Change the settings to only accept connections on the N wireless band
     3. Make sure the SSID is set to ROUTER_SSID
     4. Change the security settings to use no security
     5. Click the 'Test' button to create a connection to the router and test the connection
 VERIFICATION:
     Verification is automated, do not change the automatically selected result.

plugin: shell
name: suspend/bluetooth_detect_after_suspend
depends: suspend/suspend_advanced bluetooth/detect-output
requires:
 package.name == 'bluez'
 device.category == 'BLUETOOTH'
command: hcitool dev | tail -n+2 | awk '{print $2}' |diff $CHECKBOX_DATA/bluetooth_address -
_description:
 This test grabs the hardware address of the bluetooth adapter after suspend and compares it to the address grabbed before suspend.

plugin: shell
name: suspend/bluetooth_obex_after_suspend
depends: suspend/suspend_advanced suspend/bluetooth_obex_before_suspend
requires:
 package.name == 'bluez' and package.name == 'obexd-client'
 device.category == 'BLUETOOTH'
command: obex_send $BTDEVADDR $CHECKBOX_SHARE/data/images/JPEG_Color_Image_Ubuntu.jpg
_description:
 This is an automated Bluetooth file transfer test. It sends an image to the device specified by the BTDEVADDR environment variable.

plugin: shell
name: suspend/bluetooth_obex_after_suspend_auto
depends: suspend/suspend_advanced_auto suspend/bluetooth_obex_before_suspend
requires:
 package.name == 'bluez' and package.name == 'obexd-client'
 device.category == 'BLUETOOTH'
command: obex_send $BTDEVADDR $CHECKBOX_SHARE/data/images/JPEG_Color_Image_Ubuntu.jpg
_description:
 This is an automated Bluetooth file transfer test. It sends an image to the device specified by the BTDEVADDR environment variable.

plugin: shell
name: suspend/bluetooth_obex_send_after_suspend
depends: suspend/suspend_advanced
requires:
 package.name == 'bluez' and package.name == 'obexftp'
 device.category == 'BLUETOOTH'
command: bluetooth_test $CHECKBOX_SHARE/data/images/JPEG_Color_Image_Ubuntu.jpg $BTDEVADDR send
_description:
 This is an automated Bluetooth file transfer test. It sends an image to the device specified by the BTDEVADDR environment variable.

plugin: shell
name: suspend/bluetooth_obex_browse_after_suspend
depends: suspend/suspend_advanced suspend/bluetooth_obex_send_after_suspend
requires:
 package.name == 'bluez' and package.name == 'obexftp'
 device.category == 'BLUETOOTH'
command: bluetooth_test $CHECKBOX_SHARE/data/images/JPEG_Color_Image_Ubuntu.jpg $BTDEVADDR browse
_description:
 This is an automated Bluetooth test. It emulates browsing on a remote device specified by the BTDEVADDR environment variable.

plugin: shell
name: suspend/bluetooth_obex_get_after_suspend
depends: suspend/suspend_advanced suspend/bluetooth_obex_browse_after_suspend
requires:
 package.name == 'bluez' and package.name == 'obexftp'
 device.category == 'BLUETOOTH'
command: bluetooth_test $CHECKBOX_SHARE/data/images/JPEG_Color_Image_Ubuntu.jpg $BTDEVADDR get; sleep 3; bluetooth_test $CHECKBOX_SHARE/data/images/JPEG_Color_Image_Ubuntu.jpg $BTDEVADDR remove
_description:
 This is an automated Bluetooth test. It receives the given file from a remote host specified by the BTDEVADDR environment variable


plugin: manual
name: suspend/bluetooth_obex_after_suspend_manual
depends: suspend/suspend_advanced suspend/bluetooth_obex_before_suspend_manual
requires:
 package.name == 'bluez' and package.name == 'obexd-client'
 device.category == 'BLUETOOTH'
command: obex_send `bluetooth_scan` $CHECKBOX_SHARE/data/images/JPEG_Color_Image_Ubuntu.jpg
_description:
 PURPOSE:
     This test will send the image 'JPEG_Color_Image_Ubuntu.jpg' to a specified device
 STEPS:
     1. Click "Test" and you will be prompted to enter the Bluetooth device name of a device that can accept file transfers (It may take a few moments after entering the name for the file to begin sending)
     2. Accept any prompts that appear on both devices
 VERIFICATION:
     Was the data correctly transferred?

plugin: manual
name: suspend/cycle_resolutions_after_suspend
requires: package.name == 'xorg'
depends: suspend/suspend_advanced graphics/cycle_resolution
command: xrandr_cycle --keyword=after_suspend --screenshot-dir $CHECKBOX_DATA
_description:
 PURPOSE:
     This test will cycle through the detected display modes
 STEPS:
     1. Click "Test" and the display will cycle trough the display modes
 VERIFICATION:
     Did your display look fine in the detected mode?

plugin: shell
name: suspend/cycle_resolutions_after_suspend_auto
requires: package.name == 'xorg'
depends: suspend/suspend_advanced graphics/cycle_resolution
_description:
 This test will check to make sure supported video modes work after a suspend and resume.
 This is done automatically by taking screenshots and uploading them as an attachment.
command: xrandr_cycle --keyword=after_suspend --screenshot-dir $CHECKBOX_DATA

plugin: attachment
name: suspend/xrandr_screens_after_suspend.tar.gz
depends: suspend/cycle_resolutions_after_suspend_auto
command: [ -e $CHECKBOX_DATA/xrandr_screens_after_suspend.tgz ] && cat $CHECKBOX_DATA/xrandr_screens_after_suspend.tgz
_description: This attaches screenshots from the suspend/cycle_resolutions_after_suspend_auto test to the results submission.

plugin: shell
name: suspend/record_playback_after_suspend
depends: suspend/suspend_advanced
requires:
 device.category == 'AUDIO'
 package.name == 'python-gst0.10'
 package.name == 'alsa-base'
command: audio_test -v
_description:
 This will check to make sure that your audio device works properly after a suspend and resume.  This may work fine with speakers and onboard microphone, however, it works best if used with a cable connecting the audio-out jack to the audio-in jack.

plugin: attachment
name: suspend/suspend-auto-single-log-attach
command: [ -e $CHECKBOX_DATA/suspend_auto_single_log ] && cat $CHECKBOX_DATA/suspend_auto_single_log
_description:
 Attaches the log from the single suspend/resume test to the results

plugin: shell
name: suspend/screenshot_after_suspend
depends: suspend/suspend_advanced_auto
requires: package.name == 'fswebcam'
command: camera_test still --device=/dev/external_webcam -f ${CHECKBOX_DATA}/screenshot_after_suspend.jpg -q 2>&1 | ansi_parser
_description:
 PURPOSE:
     Take a screengrab of the current screen after suspend (logged on Unity desktop)
 STEPS:
     1. Take picture using USB webcam
 VERIFICATION:
     1. Review attachment manually later

plugin: attachment
name: screenshot_after_suspend.jpg
depends: suspend/screenshot_after_suspend
command: base64 ${CHECKBOX_DATA}/screenshot_after_suspend.jpg
_description: Attaches the screenshot captured in graphics/screenshot.

plugin: shell
name: suspend/gpu_lockup_after_suspend
requires:
 package.name == 'fwts'
 package.name == 'wmctrl'
 package.name == 'mesa-utils'
depends: suspend/suspend_advanced_auto
user: root
command: gpu_test
_description:
 PURPOSE:
     Do some challenging operations, suspend the system, do more challenging
     operations - then check for lockup on the GPU
 STEPS:
     1. Create 2 glxgears windows and move them quickly
     2. Switch workspaces/viewports with wmctrl
     3. Launch an HTML5 video playback in firefox
     4. Suspend/resume
 VERIFICATION:
     1. After a 60s workload, check kern.log for reported GPU errors

plugin: shell
name: suspend/wifi_resume_time
depends: suspend/suspend_advanced
requires:
   device.category == 'WIRELESS'
command: network_reconnect_resume_test -t 20 -d wifi
_description:
 Checks the length of time it takes to reconnect an existing wifi connection
 after a suspend/resume cycle.  The timeout is specified with the -t option.
 Device is specified with a -d option 

plugin: shell
name: suspend/network_resume_time
depends: suspend/suspend_advanced
requires:
   device.category == 'NETWORK'
command: network_reconnect_resume_test -t 10 -d wired
_description:
 Checks the length of time it takes to reconnect an existing wired connection
 after a suspend/resume cycle.  The timeout is specified with the -t option.
 Device is specified with a -d option.
