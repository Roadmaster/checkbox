plugin: shell
name: graphics/xorg-version
requires: package.name == "x11-utils"
command: xdpyinfo | grep "^X.Org version" | cut -d ':' -f 2 | tr -d ' '
_description: Test to output the Xorg version

plugin: shell
name: graphics/xorg-version-output
command: xdpyinfo | grep "^X.Org version" | cut -d ':' -f 2 | tr -d ' '
requires: package.name == "x11-utils"
_description:
 Automated test to store output in checkbox report

plugin: shell
name: graphics/gtkperf
depends: graphics/xorg-version-output
requires: package.name == 'gtkperf'
command: gtkperf -a
_description:
 Run gtkperf to make sure that GTK based test cases work
 .
 In the future add the returned time as a benchmark result to the checkbox report

plugin: manual
name: graphics/resolution-change
depends: graphics/xorg-version-output
_description:
 PURPOSE:
     This test will test the display resolution change
 STEPS:
     1. Open the Monitors application
     2. Select a new resolution from the dropdown list
     3. Click on Apply
     4. Select the original resolution from the dropdown list
     5. Click on Apply
 VERIFICATION:
     Did the resolution change as expected?

plugin: manual
name: graphics/rotation
depends: graphics/xorg-version-output
_description:
 PURPOSE:
     This test will test the display resolution change
 STEPS:
     1. Open the Monitors application
     2. Select a new rotation value from the dropdown list
     3. Click on Apply
     4. Click on Restore Previous Configuration
     5. Click on Apply
     6. Repeat 2-5 for different rotation values
 VERIFICATION:
     Did the display rotation change as expected?

plugin: shell
name: graphics/xorg-process
requires: package.name == 'xorg' and package.name == 'procps'
command: pgrep -f '/usr/bin/X' >/dev/null
_description: Test that the X process is running.

plugin: shell
name: graphics/xorg-failsafe
requires: package.name == 'xorg'
command: ! test -e /var/log/Xorg.failsafe.log
_description: Test that the X is not running in failsafe mode.

plugin: shell
name: graphics/xorg-memory
requires: package.name == 'xorg' and device.driver == 'i915'
user: root
command: xorg_memory_test xeyes
_description: Test that X does not leak memory when running programs.

plugin: manual
name: graphics/resolution
requires:
 device.category == 'VIDEO'
command: resolution_test
_description:
 PURPOSE:
     This test will test the default display resolution
 STEPS:
     1. This display is using the following resolution:
 INFO:
     $output
 VERIFICATION:
     Is this acceptable for your display?

plugin: shell
name: graphics/minimum_resolution
requires:
 device.category == 'VIDEO'
command: resolution_test --horizontal 800 --vertical 600
_description:
 Ensure the current resolution meets or exceeds the recommended minimum
 resolution (800x600). See here for details:
 .
 https://help.ubuntu.com/community/Installation/SystemRequirements

plugin: manual
name: graphics/display
requires: package.name == 'xorg' and package.name == 'python-gst0.10'
command: gst_pipeline_test -t 2 'videotestsrc ! ffmpegcolorspace ! gconfvideosink'
_description:
 PURPOSE:
     This test will test the default display
 STEPS:
     1. Click "Test" to display a video test.
 VERIFICATION:
     Do you see color bars and static?

plugin: manual
name: graphics/xrandr_detect_modes
requires: package.name == 'xorg'
command: xrandr
_description:
 PURPOSE:
     This test checks the detected video modes
 STEPS:
     1. The following screens and video modes have been detected on your system
 INFO:
     $output
 VERIFICATION:
     Are those correct?

plugin: manual
name: graphics/cycle_resolution
requires: package.name == 'xorg'
depends: xrandr_detect_modes
command: xrandr_cycle
_description:
 PURPOSE:
     This test cycle through the detected video modes
 STEPS:
     1. Click "Test" to start cycling through the video modes
 VERIFICATION:
     Did the screen appear to be working for each mode?

plugin: shell
name: graphics/compiz_check
command: run_compiz_check | ansi_parser
_description:
 Check that the hardware is able to run compiz.

plugin: manual
name: graphics/glxgears
requires: package.name == 'mesa-utils'
command: glxgears
_description:
 PURPOSE:
     This test tests the 3D capabilities of your video card
 STEPS:
     1. Click "Test" to execute glxgears
 VERIFICATION:
     Did the 3d animation appear?
