plugin: manual
name: power-management/shutdown-boot
_description:
 Shutdown/boot cycle verification procedure:
 1.- Shutdown your machine
 2.- Boot your machine
 3.- Repeat steps 1 and 2 at least 5 times
 .
 Note: This test case has to be executed manually before checkbox execution

plugin: manual
name: power-management/lid
_description:
 Does closing your laptop lid cause your screen to blank?

plugin: manual
name: power-management/lid_close
requires: device.product == 'Lid Switch' and package.name == 'linux'
command:
 for i in `seq 20`; do
  state=`cat /proc/acpi/button/lid/LID/state | awk '{print $2}'`
  [ "$state" = "closed" ] && exit 0 || sleep 0.5
 done
 exit 1
_description:
 Click the Test button, then close and open the lid.
 .
 Did the screen turn off while the lid was closed?

plugin: manual
name: power-management/lid_open
requires: device.product == 'Lid Switch' and package.name == 'linux'
command:
 for i in `seq 20`; do
  state=`cat /proc/acpi/button/lid/LID/state | awk '{print $2}'`
  [ "$state" = "open" ] && exit 0 || sleep 0.5
 done
 exit 1
_description:
 Click the Test button, then close the lid and wait 5 seconds.
 .
 Open the lid.
 .
 Did the screen turn back on when the lid was opened?

plugin: shell
name: power-management/network_before_suspend
depends: network_test
_description: Test the network before suspending.
command: network_check -a

plugin: shell
name: power-management/resolution_before_suspend
_description: Record the current resolution before suspending.
command: xrandr -q |grep '*'| awk '{print $1}' > $CHECKBOX_DATA/resolution_before_suspend.txt

plugin: shell
name: power-management/audio_before_suspend
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
_description: Test the audio before suspending.
command: amixer > $CHECKBOX_DATA/audio_before_suspend.txt

plugin: shell
name: power-management/cpu_before_suspend
requires:
 package.name == 'linux'
_description: Check all the CPUs are online before suspending
command: cpuinfo_resource > $CHECKBOX_DATA/cpuinfo_before_suspend

plugin: shell
name: power-management/memory_before_suspend
requires:
 package.name == 'linux'
_description:
 Dumps memory info to a file for comparison after suspend test has been run
command: meminfo_resource > $CHECKBOX_DATA/meminfo_before_suspend

plugin: manual
name: power-management/wireless_before_suspend
command: connect_wireless && internet_test --interface=wlan0
_description:
 Wireless network connection procedure:
  1.- Click on the Network Manager applet.
  2.- Click on Disconnect under 'Wired Networks'.
  3.- Select a network below the 'Wireless networks' section.
  4.- Notify OSD should confirm that the connection has been established.
  5.- Select Test to verify connection and throughput.
 Output:
 .
 $output
 .
 Is this correct?

plugin: shell
name: power-management/bluetooth_detect_before_suspend
requires: package.name == 'bluez'
command: hcitool dev | tail -n+2 | awk '{print $2}' > $CHECKBOX_DATA/bluetooth_address
_description:
 This test just grabs the hardware address of the bluetooth controller

plugin: manual
name: power-management/bluetooth_mouse_before_suspend
depends: power-management/bluetooth_detect_before_suspend
_description:
 Verify a bluetooth peripheral.  An example verification procedure for a bluetooth mouse is given.
 .
 Bluetooth mouse procedure:
  1.- Enable the bluetooth mouse.
  2.- Click on the bluetooth icon in the menu bar.
  3.- Select 'Setup new device'.
  4.- Look for the device in the list and select it.
  5.- Move the mouse around the screen.
  6.- Perform some single/double/right click operations.
 .
 Did all the steps work?

plugin: shell
name: power-management/rtc
requires: package.name == 'linux'
command:
 test -e /dev/rtc
_description:
 Make sure that the RTC (Real-Time Clock) device exists.

plugin: manual
name: power-management/suspend_advanced
depends: power-management/rtc power-management/network_before_suspend power-management/resolution_before_suspend power-management/wireless_before_suspend power-management/bluetooth_detect_before_suspend power-management/bluetooth_mouse_before_suspend power-management/cpu_before_suspend power-management/memory_before_suspend
requires: package.name == 'pm-utils'
_description:
 Power management Suspend and Resume test
 .
 Select Test and your system will suspend for about 30 - 60 seconds. If your system does not wake itself up after 60 seconds, please press the power button momentarily to wake the system manually. If your system fails to wake at all and must be rebooted, restart System Testing after reboot and mark this test as Failed.
user: root
command: sleep_test -d

plugin: shell
name: power-management/network_after_suspend
depends: power-management/suspend_advanced power-management/network_before_suspend
_description: Test the network after resuming.
command: internet_test

plugin: shell
name: power-management/resolution_after_suspend
depends: power-management/suspend_advanced power-management/resolution_before_suspend
_description: Test to see that we have the same resolution after resuming as before.
command: xrandr -q |grep '*'| awk '{print $1}' | diff $CHECKBOX_DATA/resolution_before_suspend.txt -

plugin: shell
name: power-management/audio_after_suspend
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
depends: power-management/suspend_advanced power-management/audio_before_suspend
_description: Test the audio after resuming.
command: amixer | diff $CHECKBOX_DATA/audio_before_suspend.txt -

plugin: shell
name: power-management/cpu_after_suspend
requires:
 package.name == 'linux'
depends: power-management/suspend_advanced power-management/cpu_before_suspend
_description: Check all CPUs are online after resuming.
command: cpuinfo_resource | diff $CHECKBOX_DATA/cpuinfo_before_suspend -

plugin: shell
name: power-management/memory_after_suspend
requires:
 package.name == 'linux'
depends: power-management/suspend_advanced power-management/memory_before_suspend
_description:
 Check that all memory is available after resuming from suspend.
command: meminfo_resource | diff $CHECKBOX_DATA/meminfo_before_suspend -

plugin: manual
name: power-management/display_after_suspend
requires:
 package.name == 'linux'
depends: power-management/suspend_advanced
_description:
 Does the display work normally after resuming from suspend?

plugin: manual
name: power-management/wireless_after_suspend
depends: power-management/suspend_advanced power-management/wireless_before_suspend
command: connect_wireless && internet_test --interface=wlan0
_description:
 Wireless network connection procedure:
  1.- Click on the Network Manager applet.
  2.- If a wired connection is established, click its Disconnect option.
  3.- Select a network below the 'Wireless networks' section.
  4.- Notify OSD should confirm that the connection has been established.
  5.- Select Test to verify connection and throughput.
 Output:
 .
 $output
 .
 Is this correct?

plugin: shell
name: power-management/bluetooth_detect_after_suspend
depends: power-management/suspend_advanced power-management/bluetooth_detect_before_suspend
requires: package.name == 'bluez'
command: grep -q `hcitool dev | tail -n+2 | awk '{print $2}'` $CHECKBOX_DATA/bluetooth_address 
_description:
 This test grabs the hardware address of the bluetooth adapter after suspend and compares it to the address grabbed before suspend.

plugin: manual
name: power-management/bluetooth_mouse_after_suspend
depends: power-management/suspend_advanced power-management/bluetooth_detect_after_suspend
_description:
 Verify a bluetooth peripheral.  An example verification procedure for a bluetooth mouse is given.
 .
 Bluetooth mouse procedure:
  1.- Enable the bluetooth mouse.
  2.- Click on the bluetooth icon in the menu bar.
  3.- Select 'Setup new device'.
  4.- Look for the device in the list and select it.
  5.- Move the mouse around the screen.
  6.- Perform some single/double/right click operations.
 .
 Did all the steps work?

plugin: manual
name: power-management/cycle_resolutions_after_suspend
requires: package.name == 'xorg'
depends: power-management/suspend_advanced graphics/xrandr_cycle
_description:
 This test will check to make sure that supported video modes work after a suspend and resume.  Select Test to begin.
command: xrandr_cycle --keyword=after_suspend

plugin: shell
name: power-management/cycle_resolutions_after_suspend_auto
requires: package.name == 'xorg'
depends: power-management/suspend_advanced graphics/xrandr_cycle
_description:
 This test will check to make sure supported video modes work after a suspend and resume.
 This is done automatically by taking screenshots and uploading them as an attachment.
command: xrandr_cycle --keyword=after_suspend

plugin: attachment
name: power-management/xrandr_screens_after_suspend.tar.gz
depends: power-management/cycle_resolutions_after_suspend_auto
command: [ -e $CHECKBOX_DATA/xrandr_screens_after_suspend.tgz ] && cat $CHECKBOX_DATA/xrandr_screens_after_suspend.tgz 

plugin: manual
name: power-management/record_playback_after_suspend
depends: power-management/suspend_advanced
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
command: alsa_record_playback
_description:
 This will check to make sure that your audio device works properly after a suspend and resume.  You can use either internal or external microphone and speakers.
 .
 To execute this test, make sure your speaker and microphone are NOT muted and the volume is set sufficiently loud to record and play audio. Select Test and then speak into your microphone. After a few seconds, your speech will be played back to you.
 .
 Did you hear your speech played back?

plugin: manual
name: power-management/hibernate_advanced
depends: power-management/rtc
requires: package.name == 'pm-utils'
user: root
command: sleep_test -s disk -w 120 --debug
_description:
 This will check to make sure your system can successfully hibernate (if supported).
 .
 Select Test to begin. The system will hibernate and should wake itself within 5 minutes.  If your system does not wake itself after 5 minutes, please press the power button to wake the system manually. If the system fails to resume from hibernate, please restart System Testing and mark this test as Failed.
 .
 Did the system successfully hibernate and did it work properly after waking up?

plugin: shell
name: power-management/fwts_wakealarm
_description: Run Colin Kings FWTS wakealarm test
requires:
 package.name == 'linux'
 package.name == 'fwts'
command: fwts_test -w -l $CHECKBOX_DATA/fwts-wakealarm.log

plugin: shell
name: power-management/tickless_idle
requires: package.name == 'linux'
_description: Check to see if CONFIG_NO_HZ is set in the kernel
command:
 zgrep 'CONFIG_NO_HZ=y' /boot/config-`uname -r` >/dev/null 2>&1

plugin: shell
name: power-management/suspend_advanced_auto
depends: power-management/rtc power-management/network_before_suspend 
requires: package.name == 'pm-utils'
_description:
 Automatic power management Suspend and Resume test
 .
 Select test and your system will suspend for about 30 - 60 seconds. If your system does not wake itself up after 60 seconds, please press the power button momentarily to wake the system manually. If your system fails to wake at all and must be rebooted, restart System Testing after reboot and mark this test as Failed.
user: root
command: sleep_test -d
