plugin: shell
name: wireless/wireless_scanning
requires:
  package.name == 'network-manager'
  device.category == 'WIRELESS'
command:
 rfkill unblock wlan wifi
 if rfkill list wlan wifi | grep -q 'Hard blocked: yes'; then
   echo "Hard block is applied to WiFi device. Please remove and retest."
   exit 1
 fi
 wireless_networks=`nmcli -f SSID dev wifi list`
 if [ `echo "$wireless_networks" | wc -l` -gt 1 ]; then
   echo "Wireless networks discovered: "
   echo "$wireless_networks"
   exit 0
 fi
 echo "No wireless networks discovered."
 exit 1
_description: Wireless scanning test. It scans and reports on discovered APs.

plugin: manual
name: wireless/wireless_connection
command: network_check
requires: device.category == 'WIRELESS'
_description:
 PURPOSE:
     This test will check your wireless connection.
 STEPS:
     1. Click on the Network icon in the panel.
     2. Select a network below the 'Wireless networks' section.
     3. Click "Test" to verify that it's possible to establish an HTTP connection.
 VERIFICATION:
     Did a notification show and was the connection correctly established?

plugin: shell
name: wireless/wireless_connection_wpa_bg
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'multiple'
user: root
environ: WPA_BG_SSID WPA_BG_PSK
command: trap "nmcli con delete id $WPA_BG_SSID" EXIT; create_connection $WPA_BG_SSID --security=wpa --key=$WPA_BG_PSK && internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
 Tests that the systems wireless hardware can connect to a router using WPA
 security and the 802.11b/g protocols.

plugin: shell
name: wireless/wireless_connection_open_bg
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'multiple'
user: root
environ: OPEN_BG_SSID
command: trap "nmcli con delete id $OPEN_BG_SSID" EXIT; create_connection $OPEN_BG_SSID && internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
 Tests that the systems wireless hardware can connect to a router using no
 security and the 802.11b/g protocols.

plugin: shell
name: wireless/wireless_connection_wpa_n
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'multiple'
user: root
environ: WPA_N_SSID WPA_N_PSK
command: trap "nmcli con delete id $WPA_N_SSID" EXIT; create_connection $WPA_N_SSID --security=wpa --key=$WPA_N_PSK && internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
 Tests that the systems wireless hardware can connect to a router using WPA
 security and the 802.11n protocol.

plugin: shell
name: wireless/wireless_connection_open_n
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'multiple'
user: root
environ: OPEN_N_SSID
command: trap "nmcli con delete id $OPEN_N_SSID" EXIT; create_connection $OPEN_N_SSID &&  internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
 Tests that the systems wireless hardware can connect to a router using no
 security and the 802.11n protocol.

plugin: manual
name: wireless/wireless_connection_wpa_bg_manual
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'single'
user: root
environ: ROUTER_SSID ROUTER_PSK
command: trap "nmcli con delete id $ROUTER_SSID" EXIT; create_connection $ROUTER_SSID --security=wpa --key=$ROUTER_PSK && internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
 PURPOSE:
     Tests that the systems wireless hardware can connect to a router using WPA
     security and the 802.11b/g protocols.
 STEPS:
     1. Open your routers configuration tool
     2. Change the settings to only accept connections on the B and G wireless bands
     3. Make sure the SSID is set to ROUTER_SSID
     4. Change the security settings to use WPA2 and ensure the PSK matches that set in ROUTER_PSK
     5. Click the 'Test' button to create a connection to the router and test the connection
 VERIFICATION:
     Verification is automated, do not change the automatically selected result.

plugin: manual
name: wireless/wireless_connection_open_bg_manual
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'single'
user: root
environ: ROUTER_SSID
command: trap "nmcli con delete id $ROUTER_SSID" EXIT; create_connection $ROUTER_SSID && internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
 PURPOSE:
     Tests that the systems wireless hardware can connect to a router using
     no security and the 802.11b/g protocols.
 STEPS:
     1. Open your routers configuration tool
     2. Change the settings to only accept connections on the B and G wireless bands
     3. Make sure the SSID is set to ROUTER_SSID
     4. Change the security settings to use no security
     5. Click the 'Test' button to create a connection to the router and test the connection
 VERIFICATION:
     Verification is automated, do not change the automatically selected result.

plugin: manual
name: wireless/wireless_connection_wpa_n_manual
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'single'
user: root
environ: ROUTER_SSID ROUTER_PSK
command: trap "nmcli con delete id $ROUTER_SSID" EXIT; create_connection $ROUTER_SSID --security=wpa --key=$ROUTER_PSK && internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
 PURPOSE:
     Tests that the systems wireless hardware can connect to a router using WPA
     security and the 802.11n protocols.
 STEPS:
     1. Open your routers configuration tool
     2. Change the settings to only accept connections on the N wireless band
     3. Make sure the SSID is set to ROUTER_SSID
     4. Change the security settings to use WPA2 and ensure the PSK matches that set in ROUTER_PSK
     5. Click the 'Test' button to create a connection to the router and test the connection
 VERIFICATION:
     Verification is automated, do not change the automatically selected result.

plugin: manual
name: wireless/wireless_connection_open_n_manual
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'single'
user: root
environ: ROUTER_SSID
command: trap "nmcli con delete id $ROUTER_SSID" EXIT; create_connection $ROUTER_SSID && internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
 PURPOSE:
     Tests that the systems wireless hardware can connect to a router using
     no security and the 802.11n protocol.
 STEPS:
     1. Open your routers configuration tool
     2. Change the settings to only accept connections on the N wireless band
     3. Make sure the SSID is set to ROUTER_SSID
     4. Change the security settings to use no security
     5. Click the 'Test' button to create a connection to the router and test the connection
 VERIFICATION:
     Verification is automated, do not change the automatically selected result.

plugin: shell
name: wireless/monitor_wireless_connection
requires:
 package.name == 'iperf'
 device.category == 'WIRELESS'
user: root
environ: WPA_BG_SSID WPA_BG_PSK SERVER_IPERF
command: trap "nmcli con delete id $WPA_BG_SSID" EXIT; create_connection $WPA_BG_SSID --security=wpa --key=$WPA_BG_PSK && iperf -c $SERVER_IPERF -t 300 -i 30
_description:
 Tests the performance of a systems wireless connection through the iperf tool.

plugin: shell
name: wireless/monitor_wireless_connection_udp
requires:
 package.name == 'iperf'
 device.category == 'WIRELESS'
user: root
environ: WPA_BG_SSID WPA_BG_PSK SERVER_IPERF
command: trap "nmcli con delete id $WPA_BG_SSID" EXIT; create_connection $WPA_BG_SSID --security=wpa --key=$WPA_BG_PSK && iperf -c $SERVER_IPERF -t 300 -i 30 -u -b 100m -p 5050
_description:
 Tests the performance of a systems wireless connection through the iperf tool, using UDP packets.

plugin: shell
name: wireless/wireless_connection_open_a
requires: device.category == 'WIRELESS'
user: root
environ: OPEN_A_SSID
command: trap "nmcli con delete id $OPEN_A_SSID" EXIT; create_connection $OPEN_A_SSID && internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
  Test that the system's wireless hardware can connect to a router using the
  802.11a protocol. This requires that you have a router pre-configured to only
  respond to requests on the 802.11a protocol.

plugin: shell
name: wireless/wireless_connection_open_b
requires: device.category == 'WIRELESS'
user: root
environ: OPEN_B_SSID
command: trap "nmcli con delete id $OPEN_B_SSID" EXIT; create_connection $OPEN_B_SSID && internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
  Test that the system's wireless hardware can connect to a router using the
  802.11b protocol. This requires that you have a router pre-configured to only
  respond to requests on the 802.11b protocol.

plugin: shell
name: wireless/wireless_connection_open_g
requires: device.category == 'WIRELESS'
user: root
environ: OPEN_G_SSID
command: trap "nmcli con delete id $OPEN_G_SSID" EXIT; create_connection $OPEN_G_SSID && internet_test --interface=`nmcli dev status | awk '/802-11-wireless/ {print $1}'`
_description:
  Test that the system's wireless hardware can connect to a router using the
  802.11g protocol. This requires that you have a router pre-configured to only
  respond to requests on the 802.11g protocol.
