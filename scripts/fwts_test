#! /usr/bin/python3

import sys
import re
from time import time, sleep
from argparse import ArgumentParser, RawTextHelpFormatter, REMAINDER
from subprocess import Popen, PIPE
from syslog import *

TESTS = ['acpiinfo',
         'acpitables',
         'apicedge',
         'apicinstance',
         'bios_info',
         'bios32',
         'checksum',
         'crs',
         'dmesg_common',
         'dmi_decode',
         'ebda',
         'fadt',
         'fan',
         'hda_audio',
         'hpet_check',
         'maxfreq',
         'maxreadreq',
         'mcfg',
         'microcode',
         'mtrr',
         'nx',
         'os2gap',
         'osilinux',
         'smbios',
         'version',
         'virt',
         'wmi',
         'cstates',
         'dmar']

def get_sleep_times(start_marker, end_marker):
    logfile = '/var/log/syslog'
    log_fh = open(logfile, 'r')
    line = ''
    sleep_start_time = 0.0
    sleep_end_time = 0.0
    resume_start_time = 0.0
    resume_end_time = 0.0

    while start_marker not in line:
        line = log_fh.readline()
        if start_marker in line:
            loglist = log_fh.readlines()

    for idx in range(0,len(loglist)):
        if 'PM: Syncing filesystems' in loglist[idx]:
            sleep_start_time = re.split('[\[\]]',loglist[idx])[1].strip()
        if 'ACPI: Low-level resume complete' in loglist[idx]:
            sleep_end_time = re.split('[\[\]]',loglist[idx-1])[1].strip()
            resume_start_time = re.split('[\[\]]', loglist[idx])[1].strip()
            idx += 1
        if 'Restarting tasks' in loglist[idx]:
            resume_end_time = re.split('[\[\]]',loglist[idx])[1].strip()
        if end_marker in loglist[idx]:
            break
        
    sleep_elapsed = float(sleep_end_time) - float(sleep_start_time)
    resume_elapsed = float(resume_end_time) - float(resume_start_time)
    return (sleep_elapsed, resume_elapsed)

def average_times(runs):
    sleep_total = 0.0
    resume_total = 0.0
    run_count = 0
    for run in runs.keys():
        run_count +=1
        sleep_total += runs[run][0]
        resume_total += runs[run][1]
    sleep_avg = sleep_total / run_count
    resume_avg = resume_total / run_count
    print('Average time to sleep: %0.5f' % sleep_avg)
    print('Average time to resume: %0.5f' % resume_avg)

def fix_sleep_args(args):
    new_args = []
    for arg in args:
        if "=" in arg:
            new_args.extend(arg.split('='))
        else:
            new_args.append(arg)
    return new_args

def main():
    description_text = 'Tests the system BIOS using the Firmware Test Suite'
    epilog_text = ('To perform sleep testing, you will need at least some of '
                   'the following options: \n'
                   's3 or s4: tells fwts which type of sleep to perform.\n'
                   '--s3-delay-delta\n'
                   '--s3-device-check\n'
                   '--s3-device-check-delay\n'
                   '--s3-max-delay\n'
                   '--s3-min-delay\n'
                   '--s3-multiple\n'
                   '--s3-quirks\n'
                   '--s3-sleep-delay\n'
                   '--s3power-sleep-delay\n\n'
                   'Example: fwts-test --sleep s3 --s3-min-delay 30 '
                   '--s3-multiple 10 --s3-device-check\n\n'
                   'For further help with sleep options:\n'
                   'fwts-test --fwts-help')
    parser = ArgumentParser(description=description_text,
                            epilog=epilog_text,
                            formatter_class=RawTextHelpFormatter)
    parser.add_argument('-l', '--log',
                      default='/tmp/fwts_results.log',
                      help=('Specify the location and name of the log file. '
                            '[Default: %(default)s]'))
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-c', '--cpufreq',
                      action='store_true',
                      help=('Chose this option to run '
                            'the CPU Frequency Scaling test only'))
    group.add_argument('-w', '--wakealarm',
                      action='store_true',
                      help='Run the fwts wakealarm test only')
    group.add_argument('-a', '--all',
                      action='store_true',
                      help='Run ALL FWTS automated tests (assumes -w and -c)')
    group.add_argument('-s', '--sleep',
                      nargs=REMAINDER,
                      action='store',
                      help=('Perform sleep test(s) using the additional '
                            'arguments provided after --sleep. All remaining '
                            'items on the command line will be passed through '
                            'to fwts for performing sleep tests.  For info on '
                            'these extra fwts options, please see the epilog '
                            'below and the --fwts-help option.'))
    group.add_argument('--fwts-help',
                      dest='fwts_help',
                      action='store_true',
                      help='Display the help info for fwts itself (lengthy)')
    args = parser.parse_args()

    tests = []
    results = {}
    critical_fails = []
    high_fails = []
    medium_fails = []
    low_fails = []
    passed = []

    if args.fwts_help:
        Popen('fwts -h', shell=True).communicate()[0]
        return 0
    elif args.cpufreq:
        tests.append('cpufreq')
    elif args.wakealarm:
        tests.append('wakealarm')
    elif args.all:
        tests.extend(['wakealarm', 'cpufreq'] + TESTS)
    elif args.sleep:
        args.sleep = fix_sleep_args(args.sleep)
        s3 = '--s3-multiple'
        s4 = '--s4-multiple'
        iterations = 1
        if s3 in args.sleep:
            iterations = int(args.sleep.pop(args.sleep.index(s3)+1))
            args.sleep.remove(s3)
        if s4 in args.sleep:
            iterations = int(args.sleep.pop(args.sleep.index(s4)+1))
            args.sleep.remove(s4)
        tests.extend(args.sleep)
    else:
        tests.extend(TESTS)
    
    # run the tests we want
    if args.sleep:
        iteration_results = {}
        print('='*20 + ' Test Results ' + '='*20)
        for iteration in range(0,iterations):
            timestamp = int(time())
            start_marker = 'CHECKBOX SLEEP TEST START %s' % timestamp
            end_marker = 'CHECKBOX SLEEP TEST STOP %s' % timestamp
            syslog(LOG_INFO, '---' + start_marker + '---' + str(time()))
            command = ('fwts -q --stdout-summary -r %s %s'
                        % (args.log, ' '.join(tests)))
            results['sleep'] = (Popen(command, stdout=PIPE, shell=True)
                                .communicate()[0].strip()).decode()
            syslog(LOG_INFO, '---' + end_marker + '---' + str(time()))
            iteration_results[iteration] = get_sleep_times(start_marker, end_marker)
            print(' - Cycle %s: Sleep Elapsed: %0.5f    Resume Elapsed: %0.5f'
                  % (iteration, 
                     iteration_results[iteration][0],
                     iteration_results[iteration][1]))
        average_times(iteration_results)
    else:
        for test in tests:
            command = ('fwts -q --stdout-summary -r %s %s'
                       % (args.log, test))
            results[test] = (Popen(command, stdout=PIPE, shell=True)
                             .communicate()[0].strip()).decode()

    # parse the summaries
    for test in results.keys():
        if results[test] == 'FAILED_CRITICAL':
            critical_fails.append(test)
        elif results[test] == 'FAILED_HIGH':
            high_fails.append(test)
        elif results[test] == 'FAILED_MEDIUM':
            medium_fails.append(test)
        elif results[test] == 'FAILED_LOW':
            low_fails.append(test)
        elif results[test] == 'PASSED':
            passed.append(test)
        else:
            continue

    if critical_fails:
        print("Critical Failures: %d" % len(critical_fails))
        for test in critical_fails: print(" - " + test)
    if high_fails:
        print("High Failures: %d" % len(high_fails))
        for test in high_fails: print(" - " + test)
    if medium_fails:
        print("Medium Failures: %d" % len(medium_fails))
        for test in medium_fails: print(" - " + test)
    if low_fails:
        print("Low Failures: %d" % len(low_fails))
        for test in low_fails: print(" - " + test)
    if passed:
        print("Passed: %d" % len(passed))
        for test in passed: print(" - " + test)

    if critical_fails or high_fails:
        return 1
    else:
        return 0

if __name__ == '__main__':
    sys.exit(main())
