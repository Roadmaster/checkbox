#!/usr/bin/python

import sys

import gettext
from gettext import gettext as _

from gi.repository import Gtk, Gdk

from optparse import OptionParser


EXIT_WITH_FAILURE = 1
EXIT_WITH_SUCCESS = 0
EXIT_TIMEOUT = 30


class Direction(object):

    def __init__(self, name):
        self.name = name
        self.tested = False
        self.value = getattr(Gdk.ScrollDirection, name.upper())


class GtkScroller(object):

    exit_code = EXIT_WITH_FAILURE

    def __init__(self, directions):
        self.directions = directions

        # Initialize GTK constants
        self.ICON_SIZE = Gtk.IconSize.BUTTON
        self.ICON_TESTED = Gtk.STOCK_YES
        self.ICON_UNTESTED = Gtk.STOCK_INDEX
        self.ICON_NOT_REQUIRED = Gtk.STOCK_REMOVE

        self.button_factory = Gtk.Button
        self.hbox_factory = Gtk.HBox
        self.image_factory = Gtk.Image
        self.label_factory = Gtk.Label
        self.vbox_factory = Gtk.VBox

        # Create GTK window.
        window = Gtk.Window()
        window.set_type_hint(Gdk.WindowType.TOPLEVEL)
        window.add_events(
            Gdk.EventMask.SCROLL_MASK | Gdk.EventMask.SMOOTH_SCROLL_MASK)
        window.set_size_request(200, 100)
        window.set_resizable(False)
        window.set_title(_("Type Text"))
        window.connect("delete-event", lambda w, e: self.quit())
        window.connect("scroll-event", self.on_scroll)
        window.show()

        # Add common widgets to the window.
        vbox = self._add_vbox(window)
        self.label = self._add_label(vbox)
        button_hbox = self._add_hbox(vbox)
        validation_hbox = self._add_hbox(vbox)
        exit_button = self._add_button(vbox, Gtk.STOCK_CLOSE)
        exit_button.connect("clicked", lambda w: self.quit())

        # Add widgets for each direction.
        self.icons = {}
        for direction in self.directions:
            self._add_label(button_hbox, direction.name)
            self.icons[direction] = self._add_image(
                validation_hbox, Gtk.STOCK_INDEX)

        self.show_text(_("Please move the mouse cursor to this window."))
        self.show_text(_("Then scroll in each direction on your touchpad."))

    def _add_button(self, context, stock):
        button = self.button_factory(stock=stock)
        context.add(button)
        button.show()
        return button

    def _add_hbox(self, context, spacing=4):
        hbox = self.hbox_factory()
        context.add(hbox)
        hbox.set_spacing(4)
        hbox.show()
        return hbox

    def _add_image(self, context, stock):
        image = self.image_factory(stock=stock, icon_size=self.ICON_SIZE)
        context.add(image)
        image.show()
        return image

    def _add_label(self, context, text=None):
        label = self.label_factory()
        context.add(label)
        label.set_size_request(0, 0)
        label.set_line_wrap(True)
        if text:
            label.set_text(text)
        label.show()
        return label

    def _add_vbox(self, context):
        vbox = self.vbox_factory()
        vbox.set_homogeneous(False)
        vbox.set_spacing(8)
        context.add(vbox)
        vbox.show()
        return vbox

    def run(self):
        Gtk.main()

    def quit(self, exit_code=EXIT_WITH_FAILURE):
        self.exit_code = exit_code
        Gtk.main_quit()

    def show_text(self, string):
        self.label.set_text(self.label.get_text() + "\n" + string)

    def found_direction(self, direction):
        direction.tested = True
        self.icons[direction].set_from_stock(
            self.ICON_TESTED, size=self.ICON_SIZE)
        self.check_directions()

    def check_directions(self):
        if all([direction.tested for direction in self.directions]):
            self.show_text(_("All required directions have been tested!"))
            self.quit(EXIT_WITH_SUCCESS)

    def on_scroll(self, window, event):
        for direction in self.directions:
            if direction.value == event.direction:
                self.found_direction(direction)
                break

        return True


def main(args):
    gettext.textdomain("checkbox")

    usage = """Usage: %prog DIRECTION..."""
    parser = OptionParser(usage=usage)
    (options, args) = parser.parse_args(args)

    if not args:
        parser.error("Must specify directions to test.")

    directions = []
    for arg in args:
        try:
            direction = Direction(arg)
        except AttributeError:
            parser.error("Unsupported direction: %s" % arg)
        directions.append(direction)

    scroller = GtkScroller(directions)
    scroller.run()

    return scroller.exit_code

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
