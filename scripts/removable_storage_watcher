#!/usr/bin/python

import sys
import signal
import gobject
import dbus

from argparse import ArgumentParser
from dbus.mainloop.glib import DBusGMainLoop

class StorageDeviceListener(object):

    def timeout(self):
        print "Ten seconds has expired waiting for the device to be inserted."
        self.error = 1
        self.loop.quit()

    def job_change_detected(self, device, job_in_progress, job_id, job_num_tasks, job_cur_task_id, job_cur_task_percentage):
        if job_id == "FilesystemMount" and self.is_device_inserted():
            print "Expected device %s inserted" % self._device
            self.error = 0
            self.loop.quit()

    def add_detected(self, added_path):
        self._bus.add_signal_receiver(self.job_change_detected, signal_name='DeviceJobChanged', dbus_interface='org.freedesktop.UDisks')

    def remove_detected(self, removed_path):
        if not self.is_device_inserted():
            print "Expected device %s has been removed" % self._device
            self.error = 0

        self.loop.quit()
    
    def is_device_inserted(self):
        ud_manager_obj = self._bus.get_object("org.freedesktop.UDisks", "/org/freedesktop/UDisks")
        ud_manager = dbus.Interface(ud_manager_obj, 'org.freedesktop.UDisks')
    
        for dev in ud_manager.EnumerateDevices():
            try:
                device_obj = self._bus.get_object("org.freedesktop.UDisks", dev)
                device_props = dbus.Interface(device_obj, dbus.PROPERTIES_IFACE)
                if not device_props.Get('org.freedesktop.UDisks.Device',"DeviceIsDrive"):
                    if device_props.Get('org.freedesktop.UDisks.Device', "DriveConnectionInterface") == self._device:
                        return True
            except dbus.DBusException:
                pass

        return False
    
    def __init__(self, device, action):
        self._device = device
        self._action = action
        self._bus = dbus.SystemBus(mainloop=DBusGMainLoop())
        self.loop = gobject.MainLoop()
        self.error = 0
        
    	if self._action == 'insert':
        	self._bus.add_signal_receiver(self.add_detected, signal_name='DeviceAdded', dbus_interface='org.freedesktop.UDisks')
    	elif self._action == 'remove':
        	self._bus.add_signal_receiver(self.remove_detected, signal_name='DeviceRemoved', dbus_interface='org.freedesktop.UDisks')

        gobject.timeout_add_seconds(10, self.timeout)

if __name__ == "__main__":
    parser = ArgumentParser(description="Wait for the specified device to be inserted or removed.")
    parser.add_argument('--device', required=True, choices=['usb','firewire','sdio'])
    parser.add_argument('--action', required=True, choices=['insert','remove'])
    args = parser.parse_args()
        
    listener = StorageDeviceListener(args.device, args.action)
    listener.loop.run()
    
    sys.exit(listener.error)
