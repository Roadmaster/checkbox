#!/usr/bin/python

import os
import sys
import time

from optparse import OptionParser

import pygst
pygst.require("0.10")

import gobject

class Player:
    """
    A simple class that plays sounds via GStreamer.
    """

    import gst

    def __init__(self):
        self._mainloop = gobject.MainLoop()

        self._pipeline = self.gst.Pipeline("my_pipeline")

        # File source
        self._filesrc = self.gst.element_factory_make("filesrc", "source")
        self._pipeline.add(self._filesrc)

        # Decoder
        self._decode = self.gst.element_factory_make("decodebin", "decode")
        # We need to do this as this is a dynamic pad - it won'y exist until
        # is used.
        self._decode.connect("new-decoded-pad", self._on_dynamic_pad)
        self._pipeline.add(self._decode)

        self._filesrc.link(self._decode)

        # Audio converter
        self._convert = self.gst.element_factory_make("audioconvert", "convert")
        self._pipeline.add(self._convert)

        # ALSA sink
        # XXX: We should be detecting which sink to use?
        self._sink = self.gst.element_factory_make("alsasink", "sink")
        self._pipeline.add(self._sink)

        self._convert.link(self._sink)

        self._bus = self._pipeline.get_bus()
        self._bus.connect("message", self._on_message)
        self._bus.add_signal_watch()

    def _on_dynamic_pad(self, dbin, pad, islast):
        pad.link(self._convert.get_pad("sink"))

    def _on_message(self, bus, message):
        t = message.type

        # XXX We need to handle other messages here, just to be safe
        if t == self.gst.MESSAGE_EOS:
            self._mainloop.quit()

    def load(self, filename):
        """
        Specifies the filename to play.
        """

        self._filesrc.set_property("location", filename)

    def play(self, filename=None):
        """
        Plays the file (if specified) or the file already loaded.
        """

        if filename:
            self.load(filename)

        self._pipeline.set_state(self.gst.STATE_PLAYING)
        self._mainloop.run()


def detect_device():
    """
    Detect the sound card.
    """

    # XXX This works, but really we should be using HAL for this.

    device = 'None'
    path = "/proc/asound/card0/id"

    if os.path.exists(path):
        fd = file(path, 'r')
        device = fd.readline().strip()

    return device


if __name__ == "__main__":
    if len(sys.argv) == 1:
        print "Usage: %s FILENAME" % os.path.basename(sys.argv[0])
    else:
        filename = sys.argv[1]

        if filename and os.path.exists(filename):
            print detect_device()
            player = Player()
            player.play(filename)
