#!/bin/bash

# Exit on any error
set -o errexit

# Cleanup on exit
function cleanup() {
    [ -n "$temp_dir" ] && rm -rf $temp_dir
    [ -n "$kvm_pid" ] && kill $kvm_pid
}

trap cleanup 0

# Build cloud image URL
temp_dir=$(mktemp -d)
if [ $# -eq 0 ]; then
    release=$(wget -q -O - http://cloud-images.ubuntu.com/query/released.latest.txt | tail -n 2 | head -1 | cut -f 1)
    cloud_dir="http://cloud-images.ubuntu.com/$release/current/"
    cloud_name=$(wget -q -O - $cloud_dir | sed -n 's/.*href="\(.*i386.*img\)".*/\1/p')
    cloud_image="$cloud_dir$cloud_name"
else
    cloud_image=$1
fi

cd $temp_dir

# Get cloud image URL
if [ ! -e "$cloud_image" ]; then
    cloud_name="$(basename $cloud_image)"
    wget -q -O $cloud_name $cloud_image
    cloud_image="$temp_dir/$cloud_name"
fi

# Create public/private ssh keys for passwordless auth.
if [ ! -e "ssh_key" ]; then
    ssh-keygen -q -t "rsa" -f "ssh_key" -N "" -C ""
fi

# Create user-data and meta-data files that will be used to modify image on first boot
cat <<EOF > "meta-data"
instance-id: iid-local01
local-hostname: cloudimg
EOF
cat <<EOF > "user-data"
#cloud-config
password: passw0rd
chpasswd: { expire: False }
ssh_pwauth: True
ssh_authorized_keys:
 - $(cat "ssh_key.pub")
EOF

# create a disk to attach with some user-data and meta-data
seed="seed.iso"
if [ ! -e "$seed" ]; then
    genisoimage -quiet -output $seed -volid cidata -joliet -rock "user-data" "meta-data"
fi

# create a new qcow image to boot, backed by the original image
boot_disk="boot-disk.img"
if [ ! -e "$boot_disk" ]; then
    qemu-img create -f qcow2 -b $cloud_image $boot_disk > /dev/null
fi

# Boot the image
kvm -m 256 \
    -net nic \
    -net user,net=10.0.0.0/8,host=10.0.0.1,hostfwd=tcp::2222-:22 \
    -drive file=$boot_disk,if=virtio \
    -drive file=$seed,if=virtio \
    -display none 2>/dev/null &
kvm_pid=$!

# Verify that the VM is running
set +o errexit
for i in $(seq 20); do
    sleep 6
    output=$(ssh -q \
        -p 2222 \
        -o StrictHostKeyChecking=no \
        -o UserKnownHostsFile=/dev/null \
        -o Batchmode=yes \
        -o ConnectTimeout=5 \
        -i "ssh_key" \
        ubuntu@127.0.0.1 \
        echo TEST_SUCCESS)
    if [ $? -eq 0 ] && [ "$output" = "TEST_SUCCESS" ]; then
        exit 0
    fi
done

exit 1
