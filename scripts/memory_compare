#!/usr/bin/env python3

import os
import sys

from checkbox.parsers.dmidecode import DmidecodeParser
from checkbox.parsers.meminfo import MeminfoParser

THRESHOLD = 10

class DmiResult:

    total_size = 0

    def addDmiDevice(self, device):
        form = getattr(device, "form", None)

        if form and "IMM" in form:
            size = 0
            try:
                size = int(getattr(device, "size", None))
            except ValueError:
                pass

            self.total_size += size

def get_installed_memory_size():
    dmi = DmidecodeParser(os.popen('dmidecode'))
    result = DmiResult()

    dmi.run(result)

    return result.total_size

class MeminfoResult:

    memtotal = 0

    def setMemory(self, memory):
        self.memtotal = memory['total']

def get_visible_memory_size():
    parser = MeminfoParser(open('/proc/meminfo'))
    result = MeminfoResult()
    parser.run(result)

    return result.memtotal

def main():
    if os.geteuid() != 0:
        print("This script must be run as root.")
        return 1

    installed_memory = get_installed_memory_size()
    print("Installed memory: %d kB" % installed_memory)

    visible_memory = get_visible_memory_size()
    print("Visible memory: %d kB" % visible_memory)

    difference = installed_memory - visible_memory
    percentage = difference / installed_memory * 100

    if percentage <= THRESHOLD:
        print("Difference is %d bytes (%.2f%%) and less than the %d%% threshold." % (difference, percentage, THRESHOLD))
        return 0
    else:
        print("Difference is %d bytes (%.2f%%) and greater than the %d%% threshold." % (difference, percentage, THRESHOLD))
        return 1

if __name__ == "__main__":
    sys.exit(main())
